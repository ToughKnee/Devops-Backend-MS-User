on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build-new-version:
        description: 'Build now and deploy the app'
        default: 'true'
        required: false

jobs:
  build-and-deploy-app:
    runs-on: ubuntu-latest
    env:
      SHORT_SHA: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      - name: Create firebase credentials.json
        id: create-firebase-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "firebase-service-account.json"
          json: ${{ secrets.FIREBASE_CREDENTIALS }}
          dir: 'src/'

      - name: Docker meta data for image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/backend-user-app:${{ env.SHORT_SHA }}
          tags: |
            type=raw,value=${{ env.SHORT_SHA }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{date 'DD/MM/YYYY'}}

      - name: Print docker metadata fields
        run: |
          echo "First tag: ${{ steps.meta.outputs.tags }}"

      - name: Docker login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Delete all docker artifacts in production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOYMENT_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker system prune -a -f

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOYMENT_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p ~/app
            # Create the .env file with secrets
            echo "DB_HOST=${{ secrets.DB_HOST }}" > ~/app/.env
            echo "DB_USER=${{ secrets.DB_USER }}" >> ~/app/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ~/app/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> ~/app/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> ~/app/.env
            cd ~/app
            # Pull the built image and run it
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend-user-app:${{ env.SHORT_SHA }}
            docker stop backend-user-app || true
            docker rm backend-user-app || true
            docker run --env-file .env -d --name backend-user-app -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/backend-user-app:${{ env.SHORT_SHA }}
            # Check the container is up and running, if not then fail workflow
            if ! docker ps --filter "name=backend-user-app" --filter "status=running" --format '{{.Names}}' | grep -w backend-user-app ; then
              echo "Container is not running, exiting..."
              exit 1
            fi


